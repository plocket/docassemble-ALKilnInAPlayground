---
comment: |
  TODO:
  - [ ] Add project name env var. #513 PR.
  - [ ] test using default project
  - [ ] restart this session
  - [ ] start new session/interview
  - [ ] delete generated files
  - [x] Use dynamic server url
  - [x] Use dynamic project
  - [x] Use dynamic user id
  - [x] Use dynamic tags
---
mandatory: True
code: |
  #if not user_logged_in():
  #  ask_to_log_in
  #wants_tags
  
  #test for stackoverflow question
  #if stackoverflow:
  #  undefine('stackoverflow')
  #  force_ask('waiting_screen')
  
  # Try to get timer going
  #time_passed
  #waiting_screen
  
  wants_tags
  #test_start_time
  the_task
  #if the_task.wait():  # Will cause a timeout
  if the_task.ready():  # Won't cause a timeout
    show_output
    #if do_delete:
    #  delete_task
    #  if delete_task.ready():
    #    deleted
    #  else:
    #    wait_for_delete
    pass
  else:
    waiting_screen
---
event: do_delete
code: |
  delete_start_time
  delete_task
  if delete_task.ready():
    deleted
  else:
    wait_for_delete
  finish_delete_artifacts_flow = True
---
id: stackoverflow
question: |
  Stackoverflow question
fields:
  - What file do you run to start the interview you want to test?: stackoverflow
---
code: |
  the_task = background_action('bg_task')
---
code: |
  delete_task = background_action('delete_artifacts')
---
code: |
  has_run_tests = False
---
event: bg_task
needs:
  - has_run_tests
  - get_folder_name
  - get_zip_name
  - got_files_html
  - get_files_html
code: |
  import subprocess
  import os
  import json
  import re
  
  if False:
    subprocess.run(['mkdir', '-p', '/var/www/.npm-global'])
  
  if False:
    outcome = subprocess.run(['npm', 'install', '-g', 'github:SuffolkLITLab/ALKiln#cli_playground'], check=False, capture_output=True, env=dict(os.environ, NPM_CONFIG_PREFIX="/var/www/.npm-global"))
    if outcome.returncode != 0:
      temp = outcome.stderr.decode('utf-8')
    else:
      temp = outcome.stdout.decode('utf-8')
  else:
    temp = "not installing"
  
  server_url = url_of('root', _external=True)
  log('================= server_url:')
  log(server_url)
  
  # if statement for idempotency - ensure tests are only run once
  if not has_run_tests:
    test_output = subprocess.run(
      ['/var/www/.npm-global/bin/alkiln-run'],
      check=False,
      capture_output=True,
      env=dict(os.environ,
        _ORIGIN='interview',
        SERVER_URL=server_url,
        _PROJECT_NAME=project_name,
        _USER_ID=f'{user_info().id}',
        _TAGS=tag_expression,
        # Don't need the values of these when running in interview
        REPO_URL="X",
        BRANCH_NAME="X",
        DOCASSEMBLE_DEVELOPER_API_KEY="X"
    ))
    has_run_tests = True
    
  log(has_run_tests)
  
  # https://github.com/SuffolkLITLab/docassemble-AssemblyLine/blob/main/docassemble/AssemblyLine/al_document.py#L1275-L1284
  # https://github.com/SuffolkLITLab/docassemble-ALDashboard/blob/main/docassemble/ALDashboard/data/questions/compile_bootstrap.yml
  
  folder_name = get_folder_name()
  log(folder_name)
  safe_zip_name = get_zip_name(folder_name)
  contents = subprocess.run(['zip', '-r', safe_zip_name, folder_name], check=False, capture_output=True)
  
  # This logs and is happy. When I abstract this elsewhere, it doesn't log.
  myfile.initialize(filename=f'{safe_zip_name}.zip')
  myfile.copy_into(f'{safe_zip_name}.zip')
  myfile.commit()
  log(myfile.path())
  
  if (not got_files_html):
    files_html = get_files_html(folder_name)
    got_files_html = True
  
  output = f'<a href=\'{myfile.url_for()}\'>All generated files zip</a>\n\n'
  output += f'{files_html}\n\n'
  output += f'<pre>\n<code>\n{temp}\n\n---\n\n'
  output += f'{test_output.stdout.decode("utf-8")}{test_output.stderr.decode("utf-8")}\n'
  output += f'</code>\n</pre>\n\n'
  output += f'{ action_button_html(url_action("do_delete"), label="Delete generated files") }'
  
  background_response(output) #.stdout.decode('utf-8').strip())
---
code: |
  got_files_html = False
---
code: |
  import os
  
  def get_files_html(folder_name):
    '''Return html to show files in the artifacts folder.
        Syntax highlighting.'''
    html = '<div>\n<h2 style="font-size: 1.2em">All tests</h2>\n<ul>\n'
    
    # Not recursive
    #for dirs_and_file_names in os.listdir(f'/tmp/{folder_name}'):
    #  html += f'<li>\n{dir}\n</li>\n'
    
    # Not recursive
    top_dirs = []
    top_files = []
    
    
    # collect names and paths
    with os.scandir(f'/tmp/{folder_name}') as scan:
      for dir_item in scan:
        if dir_item.is_dir():
          top_dirs.append(dir_item)
        elif dir_item.is_file():
          top_files.append(dir_item)
          
    # Show files that are for the all the tests combined
    # This includes error screenshots
    # TODO: alkiln, when there are secrets on a page, show something in place of an error screenshot. Default image?
    for file in top_files:
      html += f'<li>\n<strong>{file.name}</strong>: {file.path}\n</li>\n'
    
    # Show files in each Scenario
    html += '</ul>\n<h2 style="font-size: 1.2em">Scenarios</h2>\n<ul>\n'
    for dir in top_dirs:
      html += '<li>\n'
      html += f'<span><strong>{dir.name}</strong>: {dir.path}</span>\n'
      #with os.walk(f'{dir.path}') as walk:
      html += '<ul>\n'
      for root_path, dir_names, file_names in os.walk(f'{dir.path}'):
        for file_name in file_names:
          html += f'<li>\n{file_name}\n</li>\n'
      html += '</ul>\n'
      html += '</li>\n'
    
    #log(1)
    #for root_path, dir_names, file_names in os.walk(f'/tmp/{folder_name}'):
    #  html += '<li>\n'
    #  for file_name in file_names:
    #    # List the name of the file
    #    html += f'<p>{file_name}</p>\n<p>'
    #    
    #    log(2)
    #    # Show a DAFile for each file
    #    da_file = DAFile()
    #    log(3)
    #    da_file.initialize(filename=f'{file_name}')
    #    log(4)
    #    abs_file_path = os.path.abspath(os.path.join(root_path, file_name))
    #    da_file.copy_into(f'{abs_file_path}')
    #    log(5)
    #    da_file.commit()
    #    log(f'6: {da_file.path()}')
    #    html = f'<span>{da_file}</span>'
    #    log(7)
    #    
    #  html += '\n</p>\n</li>\n'
      
    html += '</ul></div>'
    
    log(html)
    
    return html
---
event: delete_artifacts
code: |
  folder_name = get_folder_name()
  safe_zip_name = get_zip_name(folder_name)
  
  import os
  try:
    os.remove(f'/tmp/{safe_zip_name}.zip')
  except Exception as error:
    log('removing ZIP error:')
    log(error)
  
  import shutil
  try:
    shutil.rmtree(f'/tmp/{folder_name}')
  except Exception as error:
    log('removing FOLDER error:')
    log(error)
  
  background_response('deleted')
---
code: |
  import re
  
  def get_zip_name(folder_name):
    return re.sub("( )+", "_", folder_name)
---
code: |
  import json
  
  def get_folder_name():
    with open('/tmp/runtime_config.json') as config:
      folder_name = json.load(config)['artifacts_path']
    return folder_name
---
# TODO: Get rid of this and do it in code
objects:
  - myfile: DAFile
---
code: |
  from docassemble.webapp.files import SavedFile
  from docassemble.webapp.backend import directory_for
  import os

  def get_list_of_projects(user_id):
    playground = SavedFile(user_id, fix=False, section='playground')
    return playground.list_of_dirs()
    
  #def get_project_file_paths(user_id, section='playground', project='default'):
  #  area = SavedFile(user_id, fix=True, section=section)
  #  the_directory = directory_for(area, project)
  #  files = [os.path.join(the_directory, file) for file in os.listdir(the_directory) if os.path.isfile(os.path.join(the_directory, file))]
  #  # Maybe remove the `.placeholder` file, here or later
  #  return files
---
event: ask_to_log_in
id: not logged in
question: |
  You need to log in
subquestion: |
  To run these tests, you need to be logged into the server where you're keeping the package that you will test.
  
  When you've logged in, come back and refresh.
---
id: test info
comment: |  
  ${ user_info().id }
  
  ${ get_list_of_projects( user_info().id ) }
  
  ${ user_info().package }
  
  ${ user_info().filename }
question: |
  How much shall I add to 553?
subquestion: |
  Not spinning: <i class="fas fa-spinner fa-spin"></i>
  
fields:
  - Do you want to use tags?: wants_tags
    datatype: yesnoradio
  - What tags do you want to use? Use a tag expression: tag_expression
    show if: wants_tags
  - note: |
      The code you want to test should be in a Project on your Playground
  - What Project is the code in?: project_name
    input type: radio
    choices:
      code: |
        [[ proj, proj ] for proj in get_list_of_projects( user_info().id )]
#+ [['', 'Default']]
---
if:
  - not wants_tags
code: |
  tag_expression = ''
---
code: |
  test_start_time = current_datetime()
---
reconsider: True
code: |
  # Deliberately explicit about the end time
  test_time = date_difference( ending=current_datetime(), starting=test_start_time )
---
prevent going back: True
event: waiting_screen
reload: True
question: |
  Hang tight. Still waiting for an answer.
subquestion: |
  This screen will reload every ten seconds until the answer is available.
  
  <i class="fas fa-spinner fa-spin"></i>
  
  Elapsed time: ${ str(test_time.delta) }
#  :${ test_time.seconds } 
  
#  ${ format_time(date_difference( ending=current_datetime(), starting=test_start_time ), format='hh:mm:ss') } since the tests started
  
# experiment for stack overflow question
#back button: True
#buttons:
#  - Back: refresh
#  - Exit: exit
#    url: https://ecosia.com
---
prevent going back: True
event: show_output
question: |
  The answer is
subquestion: |
  
  ${ the_task.get() }
  
#fields:
#  - Delete generated files and folders: do_delete
#    datatype: yesnoradio
---
code: |
  delete_start_time = current_datetime()
---
reconsider: True
code: |
  # Deliberately explicit about the end time
  delete_time = date_difference( ending=current_datetime(), starting=test_start_time )
---
prevent going back: True
id: wait for delete
event: wait_for_delete
reload: True
question: |
  Still deleting files and folders
subquestion: |
  Elapsed time: ${ str(delete_time.delta) }
---
prevent going back: True
id: deleted
event: deleted
question: |
  Files and folders generated by alkiln are deleted
---